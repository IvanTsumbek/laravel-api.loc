1 урок
Создаем папку с названием проекта laravel-api.loc
Через командную строку переходим в папку с проектом laravel-api.loc и выполняем:
composer create-project laravel/laravel:^11.0 . точка означает, что создавать папку для проекта уже не нужно
Создаем папку osp с названием проекта laravel-api.loc для смены домена

2 урок
В ключ .env переписываем коннект к БД
В БД создаем laravel_api и кодировку он использует unicode_ci  (в phpmyadmin)
php artisan migrate
php artisan install:api    в маршрутах создастся файл для апи и вылетает предложение для миграции. Нажимаем yes!!!!!!!

3 урок
php artisan make:model Category -m
Прописываем атрибуты миграции и выполняем ее
php artisan make:controller Api\V1\CategoryController --model=Category --requests --api
Прописываем сложную группу маршрутов с одним роутом

4 урок Работа с Postman. Первый JSON
Создаем в постмане коллекцию и прописываем переменную
Прописываем заголовки: Accept   application/json    и     Content-Type     application/json
Посылаем наш первый запрос к API
public function index(){return response()->json(['message' => 'Categories list']);}

5 урок API для Category
Создаем в постмане еще одну коллекцию  
В реквестах делаем тру на авторайз и прописываем правила валидации
В контроллере прописываем методы
В модели категорий добавляем разрешение на изменение
В папку бутстрапа а апп добавляем код выброса ошибок

6 урок API для Post
Прописываем маршрут
php artisan make:model Post -m
Заполняем миграцию и выполняем ее
php artisan make:controller Api\V1\PostController --model=Post --requests --api
Прописываем рулы
В модели прописываем protected $fillable = ['title', 'content', 'category_id'];
В контроллере прописываем методы
В методе шоу привели пример как скрыть от пользователя определнный пост. Например с id3

7 урок Ресурсы и формат ответа
php artisan make:resource V1\CategoryResource
С помощью ресурса прописываем только те атрибуты, которые хотим выводить, причем название ключей ставим какое хотим.
CategoryResource::collection(Category::all());  превращаем массив в объект. Также меняем и в остальных методах
php artisan make:resource V1\PostResource  проделываем те же операции, что и с категориями. В ресурсах показываем условия
Создаем связь поста с категорией
В показе постов применяем жадную загрузку

8 урок Защита маршрутов
В App\Providers\AppServiceProvider добавляем код от ларавел для ограничения количества запросов и добавляем мидлвеар 'throttle:api' в маршрут
Во втором уроке когда мы устанавливали api, Sanctum установился тоже!
Добавляем трейт HasApiTokens в модель юзера
Добавляем мидлвеар 'auth:sanctum' в маршрут

9 урок 